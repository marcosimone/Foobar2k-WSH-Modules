// ==PREPROCESSOR==
// @name "Themed Volume Bar"
// @author "Marco Simone"
// ==/PREPROCESSOR==



// Use with GdiDrawText() 
// {{
var DT_TOP = 0x00000000;
var DT_CENTER = 0x00000001;
var DT_VCENTER = 0x00000004;
var DT_WORDBREAK = 0x00000010;
var DT_CALCRECT = 0x00000400;
var DT_NOPREFIX = 0x00000800;
// }}

// {{
// Used in window.GetColorCUI()
ColorTypeCUI = {
    text: 0,
    selection_text: 1,
    inactive_selection_text: 2,
    background: 3,
    selection_background: 4,
    inactive_selection_background: 5,
    active_item_frame: 6
};

// Used in window.GetFontCUI()
FontTypeCUI = {
    items: 0,
    labels: 1
};

// Used in window.GetColorDUI()
ColorTypeDUI = {
    text: 0,
    background: 1,
    highlight: 2,
    selection: 3
};

// Used in window.GetFontDUI()
FontTypeDUI = {
    defaults: 0,
    tabs: 1,
    lists: 2,
    playlists: 3,
    statusbar: 4,
    console: 5
};
//}}



var g_instancetype = window.InstanceType;
var g_font = null;

var ww = 0, wh = 0;
var pos=0;

var slider_scale=0;
var margin_side=0;
var bar_thickness=0;

var g_textcolor = 0, g_textcolor_hl = 0;
var g_backcolor = 0;

var g_hot = false;
var g_drag = false;
var g_trackingMouse = false;
var g_oldX, g_oldY;

var g_tooltip = window.CreateTooltip();

function get_font() {
    if (g_instancetype == 0) { // CUI
        g_font = window.GetFontCUI(FontTypeCUI.items);
    } else if (g_instancetype == 1) { // DUI
        g_font = window.GetFontDUI(FontTypeDUI.defaults);
    } else {
        // None
    }
}
get_font();

function get_colors() {
    if (g_instancetype == 0) { // CUI
        g_textcolor = window.GetColorCUI(ColorTypeCUI.text);
        g_textcolor_hl = window.GetColorCUI(ColorTypeCUI.selection_text);
        g_backcolor = window.GetColorCUI(ColorTypeCUI.background);
    } else if (g_instancetype == 1) { // DUI
        g_textcolor = window.GetColorDUI(ColorTypeDUI.text);
        g_textcolor_hl = window.GetColorDUI(ColorTypeDUI.highlight);
        g_backcolor = window.GetColorDUI(ColorTypeDUI.background);
    } else {
        // None
    }
}
get_colors();

// START
function on_size() {
    ww = window.Width;
    wh = window.Height;
    slider_scale = ww*window.GetProperty("slider_scale",3)/100;
    margin_side = window.GetProperty("margin_side",5);
    bar_thickness = window.GetProperty("bar_thickness",2);
}

function on_paint(gr) {
    volume=fb.Volume;
    pos=margin_side+(ww-2*margin_side)*vol2pos(volume);
    //var text_color = g_hot ? g_textcolor_hl : g_textcolor;
    gr.FillSolidRect(margin_side, 0, ww-2*margin_side, wh, g_backcolor);
    gr.FillSolidRect(margin_side, wh/2-bar_thickness, ww-2*margin_side, bar_thickness, g_textcolor);
    gr.FillSolidRect(pos-slider_scale/2, 2, slider_scale, wh-4, g_textcolor_hl);
    //gr.GdiDrawText(volume, g_font, text_color, 0, 0, ww, wh, DT_VCENTER | DT_CENTER | DT_WORDBREAK | DT_CALCRECT | DT_NOPREFIX);
}
function on_mouse_lbtn_down(x, y) {
    g_hot=1;
    g_drag=1;
    g_tooltip.Activate();
    g_tooltip.TrackActivate = true;
    g_trackingMouse=1;
    adjust_volume(x,y);
}
function on_mouse_lbtn_up(x, y) {
    adjust_volume(x,y);
    g_drag=0;
    g_trackingMouse=0;
    g_tooltip.TrackActivate = false;
    g_tooltip.Deactivate();
}

function on_mouse_move(x,y) {
    
    adjust_volume(x,y);
    if (g_oldX != x || g_oldY != y) {
        g_tooltip.Text=parseFloat(fb.Volume).toFixed(2) + " dB";
        g_tooltip.TrackPosition(x + 10, y + 20);
        g_oldX = x;
        g_oldY = y;
    }
    
}

function adjust_volume(x,y){
    if(g_drag){
        if(x<margin_side){
            x=margin_side;
            volume=-100;
        }else if(x>ww-margin_side){
            x=ww-margin_side;
            volume=0;
        }else{
            volume=pos2vol((x-margin_side)/(ww-2*margin_side));
        }
        
        if(fb.Volume!=volume){
            fb.Volume=volume;
        }
    }
}

function on_mouse_leave() {
    if (g_hot) {
        g_hot = false;
        window.Repaint();
    }
    
}
function on_mouse_wheel(delta){
	if(delta>0)
		fb.VolumeUp();
	else
		fb.VolumeDown();
}
function on_volume_change(val){
	window.Repaint();
}
function on_font_changed() {
    get_font();
    window.Repaint();
}

function on_colors_changed() {
    get_colors();
    window.Repaint();
}
// Based on human hearing curve
// 0 <= pos <= 1
// return a value value: -100 <= vol <= 0
function pos2vol(pos) {
     return (50 * Math.log(0.99 * pos + 0.01) / Math.LN10);
}

// Inverse function of pos2vol()
function vol2pos(v){
     return (((Math.pow(10, v / 50) - 0.01) / 0.99));
}